using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using DSharpPlus.EventArgs;
using DSharpPlus.Interactivity.Extensions;

namespace RenderDiscordBot
{
    public class SuggestionService
    {
        private readonly List<Suggestion> _suggestions = new();
        private int _nextId = 1;

        public Suggestion AddSuggestion(ulong authorId, string content)
        {
            var suggestion = new Suggestion
            {
                Id = _nextId++,
                AuthorId = authorId,
                Content = content,
                Timestamp = DateTime.UtcNow,
                LikedBy = new HashSet<ulong>(),
                DislikedBy = new HashSet<ulong>()
            };
            _suggestions.Add(suggestion);
            return suggestion;
        }

        public Suggestion? GetSuggestion(int id)
            => _suggestions.FirstOrDefault(s => s.Id == id);
    }

    public class Suggestion
    {
        public int Id { get; set; }
        public ulong AuthorId { get; set; }
        public required string Content { get; set; }
        public DateTime Timestamp { get; set; }
        public required HashSet<ulong> LikedBy { get; set; }
        public required HashSet<ulong> DislikedBy { get; set; }
        public ulong? ChannelId { get; set; }
        public ulong? MessageId { get; set; }

        public int Likes => LikedBy.Count;
        public int Dislikes => DislikedBy.Count;
    }

    public class SuggestionsHandler : BaseCommandModule
    {
        private readonly SuggestionService _service;
        private readonly DiscordClient _client;
        private readonly Config _config;

        public SuggestionsHandler(DiscordClient client, SuggestionService service, Config config)
        {
            _client = client;
            _service = service;
            _config = config;
            _client.ComponentInteractionCreated += OnComponentInteraction;
        }

        [Command("sugerir")]
        public async Task Sugerir(CommandContext ctx)
        {
            await SendSuggestionPrompt(ctx.Channel, ctx.User.Id);
        }

        private async Task SendSuggestionPrompt(DiscordChannel channel, ulong userId)
        {
            var button = new DiscordButtonComponent(
                ButtonStyle.Primary,
                $"abrir_formulario_{userId}",
                "‚úçÔ∏è Enviar Sugest√£o"
            );

            var embed = new DiscordEmbedBuilder()
                .WithTitle("Envie sua sugest√£o")
                .WithDescription("Clique no bot√£o abaixo para preencher sua sugest√£o em uma mensagem privada.")
                .WithColor(DiscordColor.Blurple)
                .WithThumbnail(channel.Guild.IconUrl)
                .AddField("Como funciona",
                          "1. Clique no bot√£o abaixo\n" +
                          "2. Envie sua sugest√£o via DM\n" +
                          "3. Aguarde aprova√ß√£o", false)
                .AddField("Dicas",
                          "‚Ä¢ Seja objetivo (m√°x. 200 caracteres)\n" +
                          "‚Ä¢ Cite exemplos concretos\n" +
                          "‚Ä¢ Use linguagem respeitosa", false)
                .WithFooter($"Servidor: {channel.Guild.Name}", channel.Guild.IconUrl)
                .WithTimestamp(DateTime.UtcNow);

            await channel.SendMessageAsync(new DiscordMessageBuilder()
                .WithEmbed(embed)
                .AddComponents(button));
        }

        private async Task OnComponentInteraction(DiscordClient sender, ComponentInteractionCreateEventArgs e)
        {
            var id = e.Id;

            if (id.StartsWith("abrir_formulario_"))
            {
                await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                    new DiscordInteractionResponseBuilder()
                        .WithContent("üì¨ Verifique sua DM para continuar.")
                        .AsEphemeral(true));

                var member = await e.Guild.GetMemberAsync(e.User.Id);
                var dm = await member.CreateDmChannelAsync();

                await dm.SendMessageAsync("‚úçÔ∏è Envie agora a sua sugest√£o nesta mensagem.");

                var interactivity = _client.GetInteractivity();
                var response = await interactivity.WaitForMessageAsync(
                    m => m.Channel.Id == dm.Id && m.Author.Id == e.User.Id,
                    TimeSpan.FromMinutes(2)
                );

                if (response.TimedOut)
                {
                    await dm.SendMessageAsync("‚è∞ Tempo esgotado. Tente novamente.");
                    return;
                }

                await HandleSuggestionSubmission(e.User, response.Result.Content);
                await dm.SendMessageAsync("‚úÖ Sua sugest√£o foi enviada com sucesso!");
            }
            else if (id.StartsWith("like_") || id.StartsWith("dislike_"))
            {
                var parts = id.Split('_');
                if (parts.Length != 2 || !int.TryParse(parts[1], out var suggestionId))
                    return;

                var suggestion = _service.GetSuggestion(suggestionId);
                if (suggestion == null)
                {
                    await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                        new DiscordInteractionResponseBuilder()
                            .WithContent("‚ùå Sugest√£o n√£o encontrada.")
                            .AsEphemeral(true));
                    return;
                }

                var voterId = e.User.Id;
                bool √©Like = id.StartsWith("like_");

                if (√©Like && suggestion.LikedBy.Contains(voterId))
                {
                    await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                        new DiscordInteractionResponseBuilder()
                            .WithContent("‚ùó Voc√™ j√° curtiu esta sugest√£o.")
                            .AsEphemeral(true));
                    return;
                }
                if (!√©Like && suggestion.DislikedBy.Contains(voterId))
                {
                    await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                        new DiscordInteractionResponseBuilder()
                            .WithContent("‚ùó Voc√™ j√° desaprovou esta sugest√£o.")
                            .AsEphemeral(true));
                    return;
                }

                if (√©Like && suggestion.DislikedBy.Contains(voterId))
                    suggestion.DislikedBy.Remove(voterId);
                if (!√©Like && suggestion.LikedBy.Contains(voterId))
                    suggestion.LikedBy.Remove(voterId);

                if (√©Like)
                    suggestion.LikedBy.Add(voterId);
                else
                    suggestion.DislikedBy.Add(voterId);

                if (suggestion.ChannelId == null || suggestion.MessageId == null)
                    return;

                var guild = _client.Guilds[_config.ServerId];
                if (!guild.Channels.TryGetValue(suggestion.ChannelId.Value, out var channel))
                    return;

                var message = await channel.GetMessageAsync(suggestion.MessageId.Value);

                var updatedEmbed = new DiscordEmbedBuilder()
                    .WithTitle($"üì¨ Sugest√£o #{suggestion.Id}")
                    .WithDescription(suggestion.Content)
                    .WithFooter($"Por {e.User.Username}#{e.User.Discriminator}", e.User.AvatarUrl)
                    .WithTimestamp(suggestion.Timestamp)
                    .WithColor(DiscordColor.Azure)
                    .AddField("üëç Likes", suggestion.Likes.ToString(), true)
                    .AddField("üëé Dislikes", suggestion.Dislikes.ToString(), true);

                var likeButton = new DiscordButtonComponent(
                    ButtonStyle.Success,
                    $"like_{suggestion.Id}",
                    $"üëç {suggestion.Likes}"
                );
                var dislikeButton = new DiscordButtonComponent(
                    ButtonStyle.Danger,
                    $"dislike_{suggestion.Id}",
                    $"üëé {suggestion.Dislikes}"
                );
                var debateButton = new DiscordButtonComponent(
                    ButtonStyle.Secondary,
                    $"debate_{suggestion.Id}",
                    "üì¢ Debater com staff"
                );

                var builder = new DiscordMessageBuilder()
                    .WithEmbed(updatedEmbed)
                    .AddComponents(new[] { likeButton, dislikeButton, debateButton });

                await message.ModifyAsync(builder);

                await e.Interaction.CreateResponseAsync(InteractionResponseType.DeferredMessageUpdate);
            }
            else if (id.StartsWith("debate_"))
            {
                var parts = id.Split('_');
                if (parts.Length != 2 || !int.TryParse(parts[1], out var suggestionId))
                    return;

                var suggestion = _service.GetSuggestion(suggestionId);
                if (suggestion == null)
                {
                    await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                        new DiscordInteractionResponseBuilder()
                            .WithContent("‚ùå Sugest√£o n√£o encontrada.")
                            .AsEphemeral(true));
                    return;
                }

                await e.Interaction.CreateResponseAsync(InteractionResponseType.ChannelMessageWithSource,
                    new DiscordInteractionResponseBuilder()
                        .WithContent("üîí Canal fechado para debate privado com a staff.")
                        .AsEphemeral(true));

                if (suggestion.ChannelId == null)
                    return;

                var guild = _client.Guilds[_config.ServerId];
                if (!guild.Channels.TryGetValue(suggestion.ChannelId.Value, out var channel))
                    return;

                var everyoneRole = guild.GetRole(_config.MemberRoleId);
                var admRole = guild.GetRole(_config.AdminRoleId)!;
                var modRole = guild.GetRole(_config.ModRoleId)!;
                var authorMember = await guild.GetMemberAsync(suggestion.AuthorId);

                await channel.AddOverwriteAsync(
                    everyoneRole,
                    Permissions.None,
                    Permissions.AccessChannels
                );

                await channel.AddOverwriteAsync(
                    modRole,
                    Permissions.AccessChannels | Permissions.SendMessages | Permissions.ReadMessageHistory,
                    Permissions.None
                );

                await channel.AddOverwriteAsync(
                    admRole,
                    Permissions.AccessChannels | Permissions.SendMessages | Permissions.ReadMessageHistory,
                    Permissions.None
                );

                await channel.AddOverwriteAsync(
                    authorMember,
                    Permissions.AccessChannels | Permissions.SendMessages | Permissions.ReadMessageHistory,
                    Permissions.None
                );

                if (suggestion.MessageId != null)
                {
                    var msg = await channel.GetMessageAsync(suggestion.MessageId.Value);

                    var embed = new DiscordEmbedBuilder()
                        .WithTitle($"üì¨ Sugest√£o #{suggestion.Id} (FECHADA PARA DEBATE)")
                        .WithDescription(suggestion.Content)
                        .WithFooter($"Por {authorMember.Username}#{authorMember.Discriminator}", authorMember.AvatarUrl)
                        .WithTimestamp(suggestion.Timestamp)
                        .WithColor(DiscordColor.Gray)
                        .AddField("üëç Likes", suggestion.Likes.ToString(), true)
                        .AddField("üëé Dislikes", suggestion.Dislikes.ToString(), true);

                    await msg.ModifyAsync(new DiscordMessageBuilder().WithEmbed(embed));
                }
            }
        }

        private async Task HandleSuggestionSubmission(DiscordUser user, string content)
        {
            var suggestion = _service.AddSuggestion(user.Id, content);

            var guild = _client.Guilds[_config.ServerId];
            var category = guild.GetChannel(_config.CategorySugestsId);

            var sanitizedName = new string(content
                .Where(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')
                .Take(30)
                .ToArray()).ToLowerInvariant();

            if (string.IsNullOrWhiteSpace(sanitizedName))
                sanitizedName = $"sugestao-{suggestion.Id}";

            var channelName = $"sugestao-{suggestion.Id}-{sanitizedName}";
            var authorMember = await guild.GetMemberAsync(suggestion.AuthorId);
            var suggestionChannel = await guild.CreateChannelAsync(channelName, ChannelType.Text, category);

            suggestion.ChannelId = suggestionChannel.Id;

            var embed = new DiscordEmbedBuilder()
                .WithTitle($"üì¨ Sugest√£o #{suggestion.Id}")
                .WithDescription(suggestion.Content)
                .WithFooter($"Por {authorMember.Username}#{authorMember.Discriminator}", authorMember.AvatarUrl)
                .WithTimestamp(suggestion.Timestamp)
                .WithColor(DiscordColor.Azure)
                .AddField("üëç Likes", "0", true)
                .AddField("üëé Dislikes", "0", true);

            var likeButton = new DiscordButtonComponent(ButtonStyle.Success, $"like_{suggestion.Id}", "üëç 0");
            var dislikeButton = new DiscordButtonComponent(ButtonStyle.Danger, $"dislike_{suggestion.Id}", "üëé 0");
            var debateButton = new DiscordButtonComponent(ButtonStyle.Secondary, $"debate_{suggestion.Id}", "üì¢ Debater com staff");

            var messageBuilder = new DiscordMessageBuilder()
                .WithEmbed(embed)
                .AddComponents(likeButton, dislikeButton, debateButton);

            var message = await suggestionChannel.SendMessageAsync(messageBuilder);

            suggestion.MessageId = message.Id;
        }
    }
}
